function decorator(value, context) {
  console.log("value", value);
  console.log("context", context);
  return {
    initialize() {
      this.test = 10;
    }
  };
}

if (!Symbol.metadata) {
  Symbol.metadata = Symbol();
}

function __DefineMetadata(base, name) {
  return function(key, value) {
    if (!base[Symbol.metadata]) {
      base[Symbol.metadata] = Object.create(null);
    }
    if (!base[Symbol.metadata][name]) {
      base[Symbol.metadata][name] = {};
    }
    const db = base[Symbol.metadata][name];
    if (key in db) {
      if (!Array.isArray(db[key])) {
        return db[key] = [db[key], value];
      }
      return db[key].push(value);
    }
    return db[key] = value;
  };
}

const _C_m_symbol_8tep3 = Symbol();

class C {
  _C_m_temp_anhk98() {}
  static [_C_m_symbol_8tep3] = decorator(C.prototype._C_m_temp_anhk98, {
    kind: "method",
    name: "#m",
    isStatic: false,
    isPrivate: true,
    access: {
      get: C.prototype[_C_m_symbol_8tep3]
    },
    defineMetadata: __DefineMetadata(C.prototype, "#m")
  }) ?? C.prototype._C_m_temp_anhk98;
  static [_C_m_symbol_8tep3] = decorator(C[_C_m_symbol_8tep3], {
    kind: "method",
    name: "#m",
    isStatic: false,
    isPrivate: true,
    access: {
      get: C.prototype[_C_m_symbol_8tep3]
    },
    defineMetadata: __DefineMetadata(C.prototype, "#m")
  }) ?? C[_C_m_symbol_8tep3];
  #m = C[_C_m_symbol_8tep3];
  [_C_m_symbol_8tep3]() {
    return this.#m;
  }
}

delete C.prototype._C_m_temp_anhk98;

console.assert(new C().test === 10);