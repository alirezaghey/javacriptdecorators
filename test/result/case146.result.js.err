function decorator(value, context) {
  if ((context.kind === "method" || context.kind === "getter" || context.kind === "setter" || context.kind === "init-method" || context.kind === "init-getter" || context.kind === "init-setter") && context.isStatic) {
    return {
      get(...args) {
        console.log(`starting ${context.name} with arguments ${args.join(", ")}`);
        const ret = value(...args);
        console.log(`ending ${context.name}`);
        return ret;
      },
      initialize(v) {
        console.log("initialize class");
      }
    };
  }
}

if (!Symbol.metadata) {
  Symbol.metadata = Symbol();
}

function __DefineMetadata(base, name) {
  return function(key, value) {
    if (!base[Symbol.metadata]) {
      base[Symbol.metadata] = Object.create(null);
    }
    if (!base[Symbol.metadata][name]) {
      base[Symbol.metadata][name] = {};
    }
    const db = base[Symbol.metadata][name];
    if (key in db) {
      if (!Array.isArray(db[key])) {
        return db[key] = [db[key], value];
      }
      return db[key].push(value);
    }
    return db[key] = value;
  };
}

const _C_P_symbol_3va68o = Symbol();

class C {
  static #other = 0;
  static _C_P_temp_o9uh5o() {
    return C.#other;
  }
  static [_C_P_symbol_3va68o] = decorator(C._C_P_temp_o9uh5o, {
    kind: "getter",
    name: "#P",
    isStatic: true,
    isPrivate: true,
    access: {
      get: C[_C_P_symbol_3va68o]
    },
    defineMetadata: __DefineMetadata(C, "#P")
  }) ?? C._C_P_temp_o9uh5o;
  static get #P() {
    return C[_C_P_symbol_3va68o].bind(this)();
  }
  static [_C_P_symbol_3va68o]() {
    return C[_C_P_symbol_3va68o].bind(this);
  }
  static check() {
    return C.#P;
  }
}

delete C._C_P_temp_o9uh5o;

console.assert(C.check() === 0);

console.assert(C.test === 10);