function decorator(value, context) {
  if (context.kind === "init-method") {
    return {
      method(...args) {
        console.log(`starting ${context.name} with arguments ${args.join(", ")}`);
        const ret = value.call(this, ...args);
        console.log(`ending ${context.name}`);
        return ret;
      },
      initialize() {
        this.test = 10;
      }
    };
  }
}

if (!Symbol.metadata) {
  Symbol.metadata = Symbol();
}

function __DefineMetadata(base, name) {
  return function(key, value) {
    if (!base[Symbol.metadata]) {
      base[Symbol.metadata] = Object.create(null);
    }
    if (!base[Symbol.metadata][name]) {
      base[Symbol.metadata][name] = {};
    }
    const db = base[Symbol.metadata][name];
    if (key in db) {
      if (!Array.isArray(db[key])) {
        return db[key] = [db[key], value];
      }
      return db[key].push(value);
    }
    return db[key] = value;
  };
}

const _C_M_symbol_68bpc = Symbol();

class C {
  static _C_M_temp_ksiujg() {
    return true;
  }
  static [_C_M_symbol_68bpc] = decorator(C._C_M_temp_ksiujg, {
    kind: "method",
    name: "#M",
    isStatic: true,
    isPrivate: true,
    access: {
      get: C[_C_M_symbol_68bpc]
    },
    defineMetadata: __DefineMetadata(C, "#M")
  }) ?? C._C_M_temp_ksiujg;
  static #M = C[_C_M_symbol_68bpc];
  static [_C_M_symbol_68bpc]() {
    return this.#M;
  }
  static check() {
    return this.#M;
  }
}

delete C._C_M_temp_ksiujg;

C = decorator(C, {
  kind: "class",
  name: "C",
  defineMetadata: __DefineMetadata(C, "constructor")
}) ?? C;

console.assert(C.check());

console.assert(C.test === 10);